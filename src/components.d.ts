/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ExampleApp {

    }
  }

  interface HTMLExampleAppElement extends StencilComponents.ExampleApp, HTMLStencilElement {}

  var HTMLExampleAppElement: {
    prototype: HTMLExampleAppElement;
    new (): HTMLExampleAppElement;
  };
  interface HTMLElementTagNameMap {
    'example-app': HTMLExampleAppElement;
  }
  interface ElementTagNameMap {
    'example-app': HTMLExampleAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'example-app': JSXElements.ExampleAppAttributes;
    }
  }
  namespace JSXElements {
    export interface ExampleAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LiftBubble {

    }
  }

  interface HTMLLiftBubbleElement extends StencilComponents.LiftBubble, HTMLStencilElement {}

  var HTMLLiftBubbleElement: {
    prototype: HTMLLiftBubbleElement;
    new (): HTMLLiftBubbleElement;
  };
  interface HTMLElementTagNameMap {
    'lift-bubble': HTMLLiftBubbleElement;
  }
  interface ElementTagNameMap {
    'lift-bubble': HTMLLiftBubbleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lift-bubble': JSXElements.LiftBubbleAttributes;
    }
  }
  namespace JSXElements {
    export interface LiftBubbleAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PostListing {

    }
  }

  interface HTMLPostListingElement extends StencilComponents.PostListing, HTMLStencilElement {}

  var HTMLPostListingElement: {
    prototype: HTMLPostListingElement;
    new (): HTMLPostListingElement;
  };
  interface HTMLElementTagNameMap {
    'post-listing': HTMLPostListingElement;
  }
  interface ElementTagNameMap {
    'post-listing': HTMLPostListingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'post-listing': JSXElements.PostListingAttributes;
    }
  }
  namespace JSXElements {
    export interface PostListingAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StencilLift {
      'deleteOnClientLoad': boolean;
      'initialState': any;
      'mergeState': boolean;
    }
  }

  interface HTMLStencilLiftElement extends StencilComponents.StencilLift, HTMLStencilElement {}

  var HTMLStencilLiftElement: {
    prototype: HTMLStencilLiftElement;
    new (): HTMLStencilLiftElement;
  };
  interface HTMLElementTagNameMap {
    'stencil-lift': HTMLStencilLiftElement;
  }
  interface ElementTagNameMap {
    'stencil-lift': HTMLStencilLiftElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stencil-lift': JSXElements.StencilLiftAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilLiftAttributes extends HTMLAttributes {
      'deleteOnClientLoad'?: boolean;
      'initialState'?: any;
      'mergeState'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;